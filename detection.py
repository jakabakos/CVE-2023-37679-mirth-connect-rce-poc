# Detection script for CVE-2023-37679 and CVE-2023-43208 affecting Nextgen's Mirth Connect
# Created by √Åkos Jakab, based on:
# https://www.horizon3.ai/attack-research/attack-blogs/writeup-for-cve-2023-43208-nextgen-mirth-connect-pre-auth-rce/

import sys
import urllib3
import requests
from packaging import version
from urllib.parse import urlparse
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def get_valid_url(url):
    try:
        result = urlparse(url)
        result = result.scheme + '://' + result.netloc
        return result
    except ValueError:
        return False

def check_vulnerability(url):
    try:
        headers = {'X-Requested-With': 'OpenAPI'}
        response = requests.get(f"{url}/api/server/version", headers=headers, verify=False)
        if response.status_code == 200:
            server_version = response.text.strip('"')
            print(f"Server version: {server_version}")
            if version.parse(server_version) < version.parse("4.4.0"):
                print("Vulnerable to CVE-2023-37679 and CVE-2023-43208.")
            elif version.parse(server_version) == version.parse("4.4.0"):
                print("Vulnerable to CVE-2023-43208.")
            else:
                print("This version is safe.")
        else:
            print("Error: Failed to fetch server version.")
    except requests.exceptions.RequestException as e:
        print(f"Request Error: {e}")

def main():
    if len(sys.argv) != 2:
        print("Usage: python3 detection.py <url>")
        sys.exit(1)
    
    url = get_valid_url(sys.argv[1])
    if not url:
        print("Invalid URL. Please include full URL (e.g., https://example.com).")
        sys.exit(1)

    check_vulnerability(url)

if __name__ == "__main__":
    main()